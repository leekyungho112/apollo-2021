{"version":3,"sources":["apollo.js","components/Movie.js","routes/Detail.js","routes/Home.js","components/App.js","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","resolvers","Movie","isLiked","Mutation","toggleLike","_","id","modify","fields","isLike","LIKE_MOVIE","gql","Container","styled","div","Image","props","bg","Button","button","image","useMutation","variables","parseInt","liked","to","onClick","GET_MOVIE","DetailContainer","Loading","Info","Title","h1","Wrap","Lang","span","Rating","Desc","p","Genre","ul","Genr","li","Suggest","Detail","useParams","useQuery","Number","loading","data","movie","title","language","rating","description_intro","genres","map","g","index","medium_cover_image","suggestions","item","GET_MOVIES","Header","Movies","Home","movies","App","exact","path","component","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.61ff99c2.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://movieql2.vercel.app',\n  cache: new InMemoryCache(),\n  resolvers: {\n    Movie: {\n      isLiked: () => false,\n    },\n    Mutation: {\n      toggleLike: (_, { id }, { cache }) => {\n        cache.modify({\n          id: `Movie:${id}`,\n          fields: {\n            isLiked: (isLike) => !isLike,\n          },\n        });\n      },\n    },\n  },\n});\n\nexport default client;\n","import { gql, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst LIKE_MOVIE = gql`\n  mutation toggleLike($id: Int!) {\n    toggleLike(id: $id) @client\n  }\n`;\n\nconst Container = styled.div`\n  height: 380px;\n  width: 100%;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n\n  border-radius: 7px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${(props) => props.bg});\n  background-position: center center;\n  background-size: cover;\n  height: 100%;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  background: red;\n`;\n\nconst Movie = ({ id, image, isLiked }) => {\n  const [liked] = useMutation(LIKE_MOVIE, {\n    variables: { id: parseInt(id) },\n  });\n  return (\n    <Container>\n      <Link to={`/${id}`}>\n        <Image bg={image} />\n      </Link>\n      <Button onClick={liked}>{isLiked ? 'Unliked' : 'liked'}</Button>\n    </Container>\n  );\n};\n\nexport default Movie;\n","import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Movie from '../components/Movie';\n\nconst GET_MOVIE = gql`\n  query getMovie($id: Int!) {\n    movie(id: $id) {\n      id\n      title\n      rating\n      language\n      medium_cover_image\n      description_intro\n      genres\n      isLiked @client\n    }\n    suggestions(id: $id) {\n      id\n      medium_cover_image\n      isLiked @client\n    }\n  }\n`;\n\nconst Container = styled.div`\n  height: 100vh;\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nconst DetailContainer = styled.div`\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n`;\nconst Loading = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n`;\nconst Info = styled.div`\n  margin-left: 10px;\n  width: 50%;\n`;\nconst Title = styled.h1`\n  font-size: 40px;\n  margin-bottom: 30px;\n`;\nconst Wrap = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n`;\nconst Lang = styled.span`\n  margin-right: 10px;\n`;\nconst Rating = styled.span``;\nconst Desc = styled.p`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 40px;\n`;\nconst Genre = styled.ul`\n  display: flex;\n`;\nconst Genr = styled.li`\n  margin-right: 15px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${(props) => props.bg});\n  background-position: center center;\n  background-size: cover;\n  width: 40%;\n  height: 60%;\n`;\n\nconst Suggest = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 25px;\n  width: 100%;\n  height: 20%;\n`;\n\nconst Detail = () => {\n  const { id } = useParams();\n  const { loading, data } = useQuery(GET_MOVIE, {\n    variables: { id: Number(id) },\n  });\n\n  return (\n    <Container>\n      <DetailContainer>\n        {loading ? (\n          <Loading>loading...</Loading>\n        ) : (\n          data.movie && (\n            <>\n              <Info>\n                <Title>\n                  {data.movie.title}{' '}\n                  {data.movie.isLiked ? '좋아요' : '별로입니다'}\n                </Title>\n                <Wrap>\n                  <Lang>{data.movie.language}</Lang>\n                  <Rating>{data.movie.rating}</Rating>\n                </Wrap>\n\n                <Desc>{data.movie.description_intro}</Desc>\n                <Genre>\n                  {data.movie?.genres.map((g, index) => (\n                    <Genr key={index}>{g}</Genr>\n                  ))}\n                </Genre>\n              </Info>\n              <Image bg={data.movie.medium_cover_image} />\n            </>\n          )\n        )}\n      </DetailContainer>\n      <Suggest>\n        {data?.suggestions?.map((item, index) => (\n          <Movie\n            key={index}\n            isLiked={item.isLiked}\n            id={item.id}\n            image={item.medium_cover_image}\n          />\n        ))}\n      </Suggest>\n    </Container>\n  );\n};\n\nexport default Detail;\n","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport styled from 'styled-components';\nimport Movie from '../components/Movie';\n\nconst GET_MOVIES = gql`\n  {\n    movies {\n      id\n      medium_cover_image\n      isLiked @client\n    }\n  }\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n`;\nconst Header = styled.div`\n  height: 40%;\n  background: teal;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n`;\nconst Loading = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n`;\nconst Movies = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 25px;\n  margin: 0px 25px;\n  position: relative;\n  top: -50px;\n`;\n\nconst Home = () => {\n  const { loading, data } = useQuery(GET_MOVIES);\n\n  return (\n    <Container>\n      <Header>\n        <Title>Apollo 2021</Title>\n      </Header>\n      {loading ? (\n        <Loading>Loading...</Loading>\n      ) : (\n        data.movies && (\n          <Movies>\n            {data.movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                image={movie.medium_cover_image}\n                isLiked={movie.isLiked}\n              />\n            ))}\n          </Movies>\n        )\n      )}\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Detail from '../routes/Detail';\nimport Home from '../routes/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/:id\" component={Detail} />\n    </Router>\n  );\n}\n\nexport default App;\n","import { ApolloProvider } from '@apollo/client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport client from './apollo';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}